{"version":3,"sources":["components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.styled.js","components/Section/Section.js","components/Notification/Notification.js","App.styled.js","App.js","reportWebVitals.js","index.js"],"names":["Item","styled","li","Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","Button","button","List","ul","FeedbackOptions","options","map","option","type","name","onClick","onLeaveFeedback","Title","h1","Section","title","children","Notification","Wrap","div","App","state","addingScore","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","positiveFeedback","Number","parseInt","isNaN","nameButtons","Object","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAEaA,EAAOC,IAAOC,GAAV,oD,OCEXC,E,4JACJ,WACE,MAA0DC,KAAKC,MAAvDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBAEnC,OACE,8BACE,+BACE,cAACV,EAAD,UACE,0CAAaM,OAEf,cAACN,EAAD,UACE,6CAAgBO,OAElB,cAACP,EAAD,UACE,yCAAYQ,OAEd,cAACR,EAAD,UACE,2CAAcS,OAEhB,cAACT,EAAD,UACE,uDAA0BU,gB,GApBbC,aAoCVR,ICtCFS,EAASX,IAAOY,OAAV,4NAWNC,EAAOb,IAAOc,GAAV,8CAIJf,EAAOC,IAAOC,GAAV,mDCbXc,E,4JACJ,WAAU,IAAD,OACP,OACE,cAACF,EAAD,UACGV,KAAKC,MAAMY,QAAQC,KAAI,SAACC,GACvB,OACE,cAAC,EAAD,UACE,cAACP,EAAD,CACEQ,KAAK,SACLC,KAAMF,EACNG,QAAS,EAAKjB,MAAMkB,gBAHtB,SAKGJ,KANMA,Y,GANOR,aA2BfK,ICxBAQ,EALDvB,IAAOwB,GAAV,wECELC,E,4JACJ,WACE,MAA4BtB,KAAKC,MAAzBsB,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,OACE,gCACE,cAAC,EAAD,UAAQD,IACPC,S,GAPajB,aAkBPe,ICnBTG,E,4JACJ,WACE,OAAO,4BAAIzB,KAAKC,MAAMsB,Y,GAFChB,aAUZkB,ICPAC,EAJF7B,IAAO8B,IAAV,mDCUJC,G,kNACJC,MAAQ,CACN3B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGP0B,YAAc,SAACC,GACb,IAAQd,EAASc,EAAEC,OAAXf,KACR,EAAKgB,UAAS,SAACC,GACb,OAAO,eACJjB,EAAOiB,EAAUjB,GAAQ,O,EAKhCkB,mBAAqB,WACnB,MAA+B,EAAKN,MACpC,OADA,EAAQ3B,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBgC,gCAAkC,WAChC,MAA+B,EAAKP,MAA5B3B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBiC,EAAmBC,OAAOC,SACtB,IAAPrC,GAAeA,EAAOC,EAAUC,IAEnC,OAAOoC,MAAMH,GAAoB,EAA1B,UAAiCA,EAAjC,O,4CAGT,WACE,IAAMI,EAAcC,OAAOC,KAAK3C,KAAK6B,OAErC,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASN,MAAM,wBAAf,SACE,cAAC,EAAD,CACEV,QAAS4B,EACTtB,gBAAiBnB,KAAK8B,gBAG1B,cAAC,EAAD,CAASP,MAAM,aAAf,SACiC,IAA9BvB,KAAKmC,qBACJ,cAAC,EAAD,CAAcZ,MAAM,sBAEpB,cAAC,EAAD,CACErB,KAAMF,KAAK6B,MAAM3B,KACjBC,QAASH,KAAK6B,MAAM1B,QACpBC,IAAKJ,KAAK6B,MAAMzB,IAChBC,MAAOL,KAAKmC,qBACZ7B,mBAAoBN,KAAKoC,6C,GAjDrB7B,cA0DHqB,IC1DAgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ff9bcd6.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Item = styled.li`\r\n  margin-bottom: 10px;\r\n`;","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Item } from \"./Statistics.styled\";\r\n\r\nclass Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <Item>\r\n            <span>Good: {good}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Neutral: {neutral}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Bad: {bad}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Total: {total}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Positive feedback: {positivePercentage}</span>\r\n          </Item>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.string,\r\n};\r\n\r\nexport default Statistics;","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\n  background-colorr: ocean;\r\n  border: 1px solid rgb(133, 133, 133);\r\n  border-radius: 20px;\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: orange;\r\n    border-color: orange;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin-right: 15px;\r\n`;","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, List, Item } from \"./FeedbackOptions.styled\";\r\n\r\nclass FeedbackOptions extends Component {\r\n  render() {\r\n    return (\r\n      <List>\r\n        {this.props.options.map((option) => {\r\n          return (\r\n            <Item key={option}>\r\n              <Button\r\n                type=\"button\"\r\n                name={option}\r\n                onClick={this.props.onLeaveFeedback}\r\n              >\r\n                {option}\r\n              </Button>\r\n            </Item>\r\n          );\r\n        })}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;","import styled from \"@emotion/styled\";\r\n\r\nconst Title = styled.h1`\r\n  font-size: 24px;\r\n  font-weight: normal;\r\n`;\r\n\r\nexport default Title;","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Title from \"./Section.styled\";\r\n\r\nclass Section extends Component {\r\n  render() {\r\n    const { title, children } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Title>{title}</Title>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.object,\r\n};\r\n\r\nexport default Section;","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Notification extends Component {\r\n  render() {\r\n    return <p>{this.props.title}</p>;\r\n  }\r\n}\r\n\r\nNotification.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Notification;","import styled from \"@emotion/styled\";\r\n\r\nconst Wrap = styled.div`\r\n  padding-left: 20px;\r\n`;\r\n\r\nexport default Wrap;","import React, { Component } from \"react\";\nimport reactDom from \"react-dom\";\n\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nimport Wrap from \"./App.styled\";\nimport \"./index.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addingScore = (e) => {\n    const { name } = e.target;\n    this.setState((prevState) => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    const positiveFeedback = Number.parseInt(\n      (good * 100) / (good + neutral + bad)\n    );\n    return isNaN(positiveFeedback) ? 0 : `${positiveFeedback} %`;\n  };\n\n  render() {\n    const nameButtons = Object.keys(this.state);\n\n    return (\n      <Wrap>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={nameButtons}\n            onLeaveFeedback={this.addingScore}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification title=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </Wrap>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}